{
	"author": "Mauro Reis Vieira <mauroreisvieira@gmail.com>",
	"globals":
	{
		"accent": "var(accent)",
		"active_guide": "var(cyan)",
		"background": "var(background)",
		"block_caret": "var(cursor)",
		"block_caret_border": "var(cursor)",
		"block_caret_corner_radius": "2",
		"block_caret_corner_style": "cut",
		"block_caret_underline": "var(cursor)",
		"bracket_contents_foreground": "var(yellow)",
		"bracket_contents_options": "underline",
		"brackets_foreground": "var(cyan)",
		"brackets_options": "underline",
		"caret": "var(cursor)",
		"find_highlight": "var(yellow)",
		"find_highlight_foreground": "var(background)",
		"fold_marker": "var(yellow)",
		"foreground": "var(foreground)",
		"guide": "color(var(cyan) alpha(0.1))",
		"gutter": "var(background)",
		"gutter_foreground": "color(var(foreground) alpha(0.2))",
		"gutter_foreground_highlight": "var(foreground)",
		"highlight": "var(yellow)",
		"inactive_selection": "color(var(cyan) alpha(0.1))",
		"inactive_selection_border": "color(var(cyan) alpha(0.1))",
		"invisibles": "color(var(foreground) alpha(0.3))",
		"line_diff_added": "var(diffAdded)",
		"line_diff_deleted": "var(diffDeleted)",
		"line_diff_modified": "var(diffModified)",
		"line_diff_width": "3",
		"line_highlight": "color(var(foreground) alpha(0.1))",
		"minimap_border": "var(yellow)",
		"misspelling": "var(blue)",
		"rulers": "color(var(foreground) alpha(0.1))",
		"scroll_highlight": "color(var(yellow) alpha(0.1))",
		"scroll_selected_highlight": "var(yellow)",
		"selection": "color(var(foreground) alpha(0.10))",
		"selection_border": "var(cyan)",
		"selection_border_width": "1",
		"selection_corner_radius": "cut",
		"selection_corner_style": "cut",
		"shadow": "color(var(background) alpha(0.5))",
		"stack_guide": "var(brown)",
		"tags_foreground": "var(cyan)",
		"tags_options": "underline"
	},
	"name": "Meetio Deepocean",
	"rules":
	[
		{
			"background": "#199",
			"foreground": "#1991",
			"name": "GitSavvy Highlighted Matching Commit",
			"scope": "git_savvy.graph.matching_commit"
		},
		{
			"background": "#99991109",
			"foreground": "#19d",
			"name": "GitSavvy Highlighted Path Char Above",
			"scope": "git_savvy.graph.path_char.above"
		},
		{
			"background": "#99991109",
			"foreground": "#f91d",
			"name": "GitSavvy Highlighted Commit Dot Above",
			"scope": "git_savvy.graph.dot.above"
		},
		{
			"background": "#99991109",
			"foreground": "#991",
			"name": "GitSavvy Highlighted Path Char",
			"scope": "git_savvy.graph.path_char"
		},
		{
			"background": "#991",
			"foreground": "#9911",
			"name": "GitSavvy Highlighted Commit Dot",
			"scope": "git_savvy.graph.dot"
		},
		{
			"font_style": "italic",
			"foreground": "var(comments)",
			"name": "COMMENTS - Single and multi-line comments should use, respectively",
			"scope": "comment,comment.line,comment.block"
		},
		{
			"font_style": "italic",
			"foreground": "var(comments)",
			"name": "COMMENTS - Multi-line comments used as documentation, such as Javadoc or PhpDo",
			"scope": "comment.block.documentation"
		},
		{
			"font_style": "italic",
			"foreground": "var(comments)",
			"name": "COMMENTS - Symbols that delineate a comment, e.g. // or /*",
			"scope": "punctuation.definition.comment"
		},
		{
			"font_style": "italic",
			"foreground": "var(comments)",
			"name": "COMMENTS - Special syntax that denote a section of code",
			"scope": "meta.toc-list"
		},
		{
			"foreground": "var(orange)",
			"name": "CONSTANT - Numeric literals, including integers, floats, etc...",
			"scope": "constant.numeric,constant.numeric.integer,constant.numeric.integer.binary,constant.numeric.integer.octal,constant.numeric.integer.decimal,constant.numeric.integer.hexadecimal,constant.numeric.integer.other,constant.numeric.float,constant.numeric.float.binary,constant.numeric.float.octal,constant.numeric.float.decimal,constant.numeric.float.hexadecimal,constant.numeric.float.other,constant.numeric.complex,constant.numeric.complex.real,constant.numeric.complex.imaginary"
		},
		{
			"foreground": "var(cyan)",
			"name": "CONSTANT - Constants that are built into the language, such as booleans and null values",
			"scope": "constant.language"
		},
		{
			"foreground": "var(yellow)",
			"name": "CONSTANT - Character escapes in strings",
			"scope": "constant.character.escape"
		},
		{
			"foreground": "var(yellow)",
			"name": "CONSTANT - Formatting placeholders, such as those used for sprintf(), e.g. %s",
			"scope": "constant.other.placeholder"
		},
		{
			"foreground": "var(cyan)",
			"name": "CONSTANT - Other language-specific constant values",
			"scope": "constant.other"
		},
		{
			"foreground": "var(pink)",
			"name": "CONSTANT - Other language-specific constant values",
			"scope": "constant.other.color"
		},
		{
			"background": "var(red)",
			"name": "Message Error",
			"scope": "message.error"
		},
		{
			"background": "color(var(diffDeleted) alpha(0.20))",
			"name": "DIFF - Deleted",
			"scope": "diff.deleted"
		},
		{
			"background": "color(var(diffDeleted) alpha(0.20))",
			"name": "DIFF - Deleted Char",
			"scope": "diff.deleted.char"
		},
		{
			"background": "color(var(diffAdded) alpha(0.20))",
			"name": "DIFF - Inserted",
			"scope": "diff.inserted"
		},
		{
			"background": "color(var(diffAdded) alpha(0.20))",
			"name": "DIFF - Inserted Char",
			"scope": "diff.inserted.char"
		},
		{
			"foreground": "var(yellow)",
			"name": "ENTITY - The names of data structures",
			"scope": "entity.name.class,entity.name.struct,entity.name.enum,entity.name.union,entity.name.trait,entity.name.interface,entity.name.impl,entity.name.type"
		},
		{
			"foreground": "var(yellow)",
			"name": "ENTITY - Forward-decl variants of the above are used in languages such as C and C++.",
			"scope": "entity.name.class.forward-decl"
		},
		{
			"foreground": "var(orange)",
			"name": "ENTITY - Class, interface and trait names listed as an inherited class or implemented interface/trait",
			"scope": "entity.other.inherited-class"
		},
		{
			"foreground": "var(blue)",
			"name": "ENTITY - Function names receive one of the following scopes",
			"scope": "entity.name.function,entity.name.function.constructor,entity.name.function.destructor"
		},
		{
			"foreground": "var(yellow)",
			"name": "ENTITY - Namespaces, packages and modules use the following scope",
			"scope": "entity.name.namespace"
		},
		{
			"foreground": "var(orange)",
			"name": "ENTITY - This scope is often included in the symbol list and index",
			"scope": "entity.name.constant"
		},
		{
			"foreground": "var(cyan)",
			"name": "ENTITY - Labels for goto-like constructs",
			"scope": "entity.name.label"
		},
		{
			"foreground": "var(purple)",
			"name": "ENTITY - Heading names in markup languages, such as Markdown and Textile",
			"scope": "entity.name.section"
		},
		{
			"foreground": "var(red)",
			"name": "ENTITY - HTML and XML tags",
			"scope": "entity.name.tag"
		},
		{
			"foreground": "var(yellow)",
			"name": "ENTITY - HTML, CSS and XML",
			"scope": "entity.other.attribute-name"
		},
		{
			"foreground": "var(invalid)",
			"name": "INVALID - Elements that are illegal in a specific context",
			"scope": "invalid.illegal"
		},
		{
			"foreground": "var(deprecated)",
			"name": "INVALID - Deprecated elements",
			"scope": "invalid.deprecated"
		},
		{
			"foreground": "var(cyan)",
			"name": "KEYWORD- Control keywords examples include if, try, end and while. Some syntaxes prefer to mark if and else with the conditional variant.",
			"scope": "keyword.control,keyword.control.conditional,keyword.control.import"
		},
		{
			"foreground": "var(cyan)",
			"name": "KEYWORD - Keywords that contain punctuation, such as the @ symbol in CSS",
			"scope": "punctuation.definition.keyword"
		},
		{
			"foreground": "var(orange)",
			"name": "KEYWORD - All remaining non-operator keywords fall under the other",
			"scope": "keyword.other"
		},
		{
			"foreground": "var(cyan)",
			"name": "KEYWORD - Operators are typically symbols, so the term keyword can seem somewhat contradictory.",
			"scope": "keyword.operator,keyword.operator.arithmetic,keyword.operator.bitwise,keyword.operator.logical"
		},
		{
			"foreground": "var(cyan)",
			"name": "KEYWORD - When the operator is a word, such as and, or or not, the following variant is used",
			"scope": "keyword.operator.word"
		},
		{
			"foreground": "var(cyan)",
			"name": "KEYWORD - Operator comparison and assignment ",
			"scope": "keyword.operator.assignment,keyword.operator.comparison"
		},
		{
			"foreground": "var(cyan)",
			"name": "MARKUP - Section headings",
			"scope": "markup.heading"
		},
		{
			"foreground": "var(cyan)",
			"name": "MARKUP - Lists",
			"scope": "markup.list.unnumbered,markup.list.numbered"
		},
		{
			"font_style": "bold",
			"foreground": "var(red)",
			"name": "MARKUP - Bold",
			"scope": "markup.bold"
		},
		{
			"font_style": "italic",
			"foreground": "var(red)",
			"name": "MARKUP - Italic",
			"scope": "markup.italic"
		},
		{
			"font_style": "underline",
			"foreground": "var(purple)",
			"name": "MARKUP - Underline",
			"scope": "markup.underline"
		},
		{
			"font_style": "italic underline",
			"foreground": "var(red)",
			"name": "MARKUP - Underline Link",
			"scope": "markup.underline.link"
		},
		{
			"foreground": "var(red)",
			"name": "MARKUP - Deleted",
			"scope": "markup.deleted"
		},
		{
			"foreground": "var(green)",
			"name": "MARKUP - Inserted",
			"scope": "markup.inserted"
		},
		{
			"foreground": "var(orange)",
			"name": "MARKUP - Changed",
			"scope": "markup.changed"
		},
		{
			"font_style": "italic",
			"foreground": "var(cyan)",
			"name": "MARKUP - Blockquotes and other quote styles",
			"scope": "markup.quote"
		},
		{
			"background": "color(var(blue) alpha(0.05))",
			"name": "MARKUP - Inline and block literal quoting",
			"scope": "markup.raw.inline,markup.raw.block"
		},
		{
			"background": "color(var(blue) alpha(0.05))",
			"name": "MARKUP - Inline and block literal quoting",
			"scope": "meta.code-fence.definition.begin.text.markdown-gfm,meta.code-fence.definition.end.text.markdown-gfm,markup.raw.code-fence.markdown-gfm"
		},
		{
			"foreground": "var(yellow)",
			"name": "MARKUP - Other markup, including constructs such as footnotes and tables",
			"scope": "markup.other"
		},
		{
			"foreground": "var(pink)",
			"name": "MARKUP - Blockquote definition",
			"scope": "punctuation.definition.blockquote"
		},
		{
			"foreground": "var(green)",
			"name": "MARKUP - Blockquote definition",
			"scope": "meta.link.inline.description"
		},
		{
			"foreground": "var(foreground)",
			"name": "META - HTML and XML tags, including punctuation, names and attributes",
			"scope": "meta.tag"
		},
		{
			"foreground": "var(purple)",
			"name": "META - The complete contents of data structures",
			"scope": "meta.class,meta.struct,meta.enum,meta.union,meta.trait,meta.interface,meta.impl,meta.type"
		},
		{
			"foreground": "var(purple)",
			"name": "META - The entire scope of a function",
			"scope": "meta.function,meta.function.parameters,meta.function.return-type"
		},
		{
			"foreground": "var(blue)",
			"name": "META - The entirety of a namespace",
			"scope": "meta.namespace"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Preprocessor statements in language such as C",
			"scope": "meta.preprocessor"
		},
		{
			"foreground": "var(green)",
			"name": "META - Annotations, attributes and decorator statements that are used to modify the behavior or implementation of a class, method or function",
			"scope": "meta.annotation,meta.annotation.identifier,meta.annotation.parameters,punctuation.definition.annotation"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Complete identifiers, including namespace names",
			"scope": "meta.path"
		},
		{
			"foreground": "var(yellow)",
			"name": "META - Function names, including the full path, and all parameters",
			"scope": "meta.function-call"
		},
		{
			"foreground": "var(blue)",
			"name": "Meta - Mapping Key",
			"scope": "meta.mapping.key"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Sections of code delineated by curly braces",
			"scope": "meta.block,punctuation.section.block.begin,punctuation.section.block.end,meta.braces,punctuation.section.braces.begin,punctuation.section.braces.end"
		},
		{
			"foreground": "var(orange)",
			"name": "META - Sections of code delineated by round braces",
			"scope": "meta.brace.round"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Sections of code delineated by parentheses",
			"scope": "meta.group,punctuation.section.group.begin,punctuation.section.group.end,meta.parens,punctuation.section.parens.begin,punctuation.section.parens.end"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Sections of code delineated by square brackets",
			"scope": "meta.brackets,punctuation.section.brackets.begin,punctuation.section.brackets.end,meta.array.literal,meta.brace.square"
		},
		{
			"foreground": "var(cyan)",
			"name": "META - Generic data type constructs",
			"scope": "meta.generic,punctuation.definition.generic.begin,punctuation.definition.generic.end"
		},
		{
			"foreground": "var(foreground)",
			"name": "META - Paragraphs in markup",
			"scope": "meta.paragraph"
		},
		{
			"foreground": "var(blue)",
			"name": "META - Object",
			"scope": "meta.objectliteral,meta.object.member"
		},
		{
			"foreground": "var(blue)",
			"name": "META - Object",
			"scope": "meta.field.declaration"
		},
		{
			"foreground": "var(pink)",
			"name": "META - Diff Header",
			"scope": "meta.diff, meta.diff.header"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Separators such as commas",
			"scope": "punctuation.separator"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Semicolons or other statement terminators",
			"scope": "punctuation.terminator"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Parameters eg: ()",
			"scope": "punctuation.definition.group.begin,punctuation.definition.group.end,punctuation.section.inheritance.begin,punctuation.section.inheritance.end,punctuation.section.arguments.begin,punctuation.section.arguments.end,punctuation.definition.parameters.begin,punctuation.definition.parameters.end,punctuation.definition.block,punctuation.definition.metadata.begin,punctuation.definition.metadata.end,meta.group.braces.round.function.arguments"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Embedded eg: {}",
			"scope": "punctuation.section.embedded.begin,punctuation.section.embedded.end,meta.interpolation punctuation.section.interpolation.begin,meta.interpolation punctuation.section.interpolation.end"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Parameters eg: <>",
			"scope": "punctuation.definition.tag.begin,punctuation.definition.tag.end,punctuation.definition.reference.email.end.git,punctuation.definition.reference.email.begin.git"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Parameters eg: []",
			"scope": "punctuation.section.sequence.begin,punctuation.section.sequence.end,punctuation.definition.link.begin,punctuation.definition.link.end,punctuation.definition.image.begin,punctuation.definition.image.end"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Line-continuation characters, such as in Python and R",
			"scope": "punctuation.separator.continuation"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Member access, scope resolution, or similar constructs",
			"scope": "punctuation.accessor"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Property list, such CSS in HTML",
			"scope": "punctuation.section.property-list"
		},
		{
			"foreground": "var(cyan)",
			"name": "PUNCTUATION - Section mapping, such as JSON, eg: \"{}\"",
			"scope": "punctuation.section.mapping.begin,punctuation.section.mapping.end"
		},
		{
			"foreground": "var(green)",
			"name": "SOURCE - A language-specific variant of the following scope is typically applied to the entirety of a source code file",
			"scope": "source"
		},
		{
			"foreground": "var(purple)",
			"name": "STORAGE - Types should use the following scope. Examples include int, bool and char",
			"scope": "storage.type"
		},
		{
			"foreground": "var(purple)",
			"name": "STORAGE - Keywords that affect the storage of a variable, function or data structure should use the following scope. Examples include static, inline, const, public and private",
			"scope": "storage.modifier"
		},
		{
			"foreground": "var(pink)",
			"name": "STORAGE - Keywords for functions or methods",
			"scope": "storage.type.function keyword.declaration.function"
		},
		{
			"foreground": "var(purple)",
			"name": "STORAGE - Keywords for classes, structs, interfaces",
			"scope": "storage.type.class keyword.declaration.class,storage.type.struct keyword.declaration.struct,storage.type.enum keyword.declaration.enum,storage.type.union keyword.declaration.union,storage.type.trait keyword.declaration.trait,storage.type.interface keyword.declaration.interface,storage.type.impl keyword.declaration.impl,storage.type keyword.declaration.type"
		},
		{
			"foreground": "var(green)",
			"name": "STRING - Basic strings use the one",
			"scope": "string.quoted.single,string.quoted.double,string.quoted.triple"
		},
		{
			"foreground": "var(cyan)",
			"name": "STRING - Strings that used unconventional quotes, such as < and > with C imports",
			"scope": "string.quoted.other"
		},
		{
			"foreground": "var(cyan)",
			"name": "STRING - The entirety of a string, along with all punctuation, prefixes, suffixes and interpolations",
			"scope": "meta.string"
		},
		{
			"foreground": "var(cyan)",
			"name": "STRING - Punctuation at the beginning and end of strings",
			"scope": "punctuation.definition.string.begin,punctuation.definition.string.end"
		},
		{
			"foreground": "var(yellow)",
			"name": "STRING - Unquoted strings, such as in Shell and Batch File",
			"scope": "string.unquoted"
		},
		{
			"foreground": "var(yellow)",
			"name": "STRING - Regular expression literal",
			"scope": "string.regexp"
		},
		{
			"foreground": "var(yellow)",
			"name": "STRING - When a string contain interpolated code",
			"scope": "meta.interpolation"
		},
		{
			"foreground": "var(yellow)",
			"name": "STRING - The punctuation for an interpolated expression",
			"scope": "punctuation.section.interpolation.begin,punctuation.section.interpolation.end"
		},
		{
			"foreground": "var(yellow)",
			"name": "STRING - Between the punctuation, the interpolated expression",
			"scope": "source.language-suffix.embedded"
		},
		{
			"foreground": "var(pink)",
			"name": "SUPPORT - Elements provided by a base frameworks",
			"scope": "support.constant,support.function,support.module"
		},
		{
			"foreground": "var(foreground)",
			"name": "SUPPORT - While also used for base frameworks, many syntaxes apply these to scopes unrecognized classes and types, effectively scoping all user constructs.",
			"scope": "support.type,support.class,support.variable.property"
		},
		{
			"foreground": "var(purple)",
			"name": "SUPPORT - Class Component",
			"scope": "support.class.component"
		},
		{
			"foreground": "var(yellow)",
			"name": "SUPPORT - Type Primitive",
			"scope": "support.type.primitive"
		},
		{
			"foreground": "var(foreground)",
			"name": "TEXT - HTML",
			"scope": "text.html"
		},
		{
			"foreground": "var(foreground)",
			"name": "TEXT - XML",
			"scope": "text.xml"
		},
		{
			"foreground": "var(brown)",
			"name": "VARIABLE - Declaration",
			"scope": "variable.declaration,variable.other"
		},
		{
			"foreground": "var(foreground)",
			"name": "VARIABLE - A generic variable",
			"scope": "variable.other.readwrite"
		},
		{
			"foreground": "var(cyan)",
			"name": "VARIABLE - Symbols that are part of the variable name",
			"scope": "punctuation.definition.variable"
		},
		{
			"foreground": "var(red)",
			"name": "VARIABLE - Immutable variables",
			"scope": "variable.other.constant"
		},
		{
			"foreground": "var(red)",
			"name": "VARIABLE - Reserved variable names that are specified by the language, such as this, self, super",
			"scope": "variable.language"
		},
		{
			"foreground": "var(red)",
			"name": "VARIABLE - Parameters to a function or methods",
			"scope": "variable.parameter"
		},
		{
			"foreground": "var(yellow)",
			"name": "VARIABLE - Fields, properties, members and attributes of a class",
			"scope": "variable.other.member"
		},
		{
			"foreground": "var(blue)",
			"name": "VARIABLE - Function and method name",
			"scope": "variable.function"
		},
		{
			"foreground": "var(yellow)",
			"name": "VARIABLE - The final label in an identifier that is part of an annotation",
			"scope": "variable.annotation"
		},
		{
			"foreground": "var(orange)",
			"name": "CSS - Attribute name ID",
			"scope": "entity.other.attribute-name.id"
		},
		{
			"foreground": "var(yellow)",
			"name": "CSS - Attribute name Class",
			"scope": "entity.other.attribute-name.class"
		},
		{
			"foreground": "var(purple)",
			"name": "CSS - Pseudo class",
			"scope": "entity.other.pseudo-class"
		},
		{
			"foreground": "var(purple)",
			"name": "CSS - Pseudo element",
			"scope": "entity.other.pseudo-element"
		},
		{
			"foreground": "var(purple)",
			"name": "HTML - Attribute name ID",
			"scope": "meta.attribute-with-value.id. entity.other.attribute-name.id"
		},
		{
			"font_style": "normal",
			"foreground": "var(green)",
			"name": "HTML - Attribute name ID",
			"scope": "meta.attribute-with-value.id. string.quoted.double. meta.toc-list.id."
		},
		{
			"foreground": "var(foreground)",
			"name": "GIT - Text",
			"scope": "text.git.commit meta.subject.git.commit markup.heading.subject.git.commit"
		},
		{
			"font_style": "italic",
			"foreground": "var(cyan)",
			"name": "GIT - Author username",
			"scope": "text.git.commit meta.reference.username.git entity.name.reference.username.git"
		},
		{
			"font_style": "italic",
			"foreground": "var(blue)",
			"name": "GIT - Author email",
			"scope": "text.git.commit entity.name.reference.email.git"
		},
		{
			"foreground": "var(yellow)",
			"name": "GIT - Comment Timestamp",
			"scope": "text.git.commit comment.line.git.commit constant.language.timestamp.git.commit"
		},
		{
			"font_style": "bold",
			"foreground": "var(purple)",
			"name": "GIT - Reference number",
			"scope": "text.git.commit meta.reference.issue.git constant.other.reference.issue.git"
		},
		{
			"font_style": "bold",
			"foreground": "var(green)",
			"name": "GIT - Hash number",
			"scope": "text.git.commit meta.message.git.commit constant.other.hash.git.commit"
		},
		{
			"foreground": "var(red)",
			"name": "GIT - Resolved issue",
			"scope": "text.git.commit keyword.other.resolved-issue.git"
		},
		{
			"foreground": "var(yellow)",
			"name": "JS - Console, \"console\"",
			"scope": "support.type.object.console,support.class.console"
		},
		{
			"foreground": "var(blue)",
			"name": "JS - Console, \"log\"",
			"scope": "support.function.console"
		},
		{
			"foreground": "var(blue)",
			"name": "JS - Other property",
			"scope": "source.js variable.other.property.js"
		},
		{
			"foreground": "var(purple)",
			"name": "JSON - Key ",
			"scope": "meta.mapping.key.json string.quoted.double.json"
		},
		{
			"foreground": "var(yellow)",
			"name": "JSON - Mapping Level 1",
			"scope": "source.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json"
		},
		{
			"foreground": "var(orange)",
			"name": "JSON - Mapping Level 2",
			"scope": "source.json meta.mapping.value.json meta.mapping.value.json meta.mapping.key.json string.quoted.double.json"
		},
		{
			"foreground": "var(foreground)",
			"name": "JSX - Meta",
			"scope": "meta.jsx.js"
		},
		{
			"foreground": "var(green)",
			"name": "JSX - String Quoted",
			"scope": "string.quoted.jsx"
		},
		{
			"foreground": "var(purple)",
			"name": "PYTHON - Keyword declaration function",
			"scope": "source.python keyword.declaration.function.python"
		},
		{
			"foreground": "var(blue)",
			"name": "PYTHON - Function magic",
			"scope": "source.python support.function.magic.python"
		},
		{
			"foreground": "var(blue)",
			"name": "PYTHON - Function",
			"scope": "source.python meta.function.python,source.python meta.qualified-name.python support.type.python"
		},
		{
			"foreground": "var(foreground)",
			"name": "PYTHON - Qualified name",
			"scope": "source.python meta.qualified-name.python"
		},
		{
			"foreground": "var(blue)",
			"name": "PYTHON - Generic name",
			"scope": "source.python variable.function.python meta.generic-name.python"
		},
		{
			"foreground": "var(foreground)",
			"name": "VUE - Console, \"console\"",
			"scope": "text.html.vue meta.property.object"
		},
		{
			"foreground": "var(red)",
			"name": "YAML - Key",
			"scope": "entity.name.tag.yaml"
		},
		{
			"foreground": "var(green)",
			"name": "YAML - String",
			"scope": "source.yaml string.unquoted"
		},
		{
			"font_style": "bold",
			"foreground": "var(blue)",
			"name": "Better Find Buffer - Total Files Count",
			"scope": "variable.total_files_count.find-in-files"
		},
		{
			"font_style": "underline bold",
			"foreground": "var(green)",
			"name": "Better Find Buffer - Query Files Count",
			"scope": "string.query.find-in-files"
		},
		{
			"font_style": "bold",
			"foreground": "var(green)",
			"name": "Better Find Buffer - Match Count",
			"scope": "variable.matched_count.find-in-files"
		},
		{
			"font_style": "bold",
			"foreground": "var(blue)",
			"name": "Better Find Buffer - Match Files Count",
			"scope": "variable.matched_files_count.find-in-files"
		},
		{
			"font_style": "bold",
			"foreground": "var(red)",
			"name": "Better Find Buffer - No Match",
			"scope": "variable.no_matches.find-in-files"
		},
		{
			"foreground": "color(var(blue) alpha(0.2))",
			"name": "Better Find Buffer - Line Number",
			"scope": "constant.numeric.line-number.find-in-files"
		},
		{
			"background": "color(var(blue) alpha(0.2))",
			"name": "Better Find Buffer - Match",
			"scope": "match.find-in-files"
		},
		{
			"background": "color(var(blue) alpha(0.1))",
			"foreground": "var(accent)",
			"name": "Better Find Buffer - Line Number Match",
			"scope": "constant.numeric.line-number.match.find-in-files"
		},
		{
			"background": "color(var(blue) alpha(0.1))",
			"foreground": "color(var(blue) alpha(0.1))",
			"name": "Better Find Buffer - Punctuation Line Number Match",
			"scope": "punctuation.line-number.match.find-in-files"
		},
		{
			"background": "var(accent)",
			"font_style": "bold",
			"foreground": "var(white)",
			"name": "Better Find Buffer - File name",
			"scope": "entity.name.filename.find-in-files"
		},
		{
			"background": "var(background)",
			"name": "Better Find Buffer - Footer",
			"scope": "footer.find-in-files"
		},
		{
			"foreground": "var(blue)",
			"name": "PYTHON - Parameters Annotation ",
			"scope": "source.python meta.function.parameters.annotation.python meta.qualified-name.python meta.generic-name.python"
		},
		{
			"foreground": "var(green)",
			"name": "ENTITY - Filenames",
			"scope": "entity.name.filename"
		}
	],
	"variables":
	{
		"--bluish": "#82AAFF",
		"--cyanish": "#7FDBCA",
		"--greenish": "#C3E88D",
		"--orangish": "#F78C6C",
		"--pinkish": "#FF5899",
		"--purplish": "#C2AFFF",
		"--redish": "#D95757",
		"--yellowish": "#ECF991",
		"accent": "#80CBC4",
		"background": "#011627",
		"black": "#000000",
		"blue": "#82AAFF",
		"brown": "#996667",
		"comments": "#697098",
		"cursor": "#FFCC00",
		"cyan": "#7FDBCA",
		"deprecated": "#FFC777A1",
		"diffAdded": "#C3E88D60",
		"diffDeleted": "#D9575760",
		"diffModified": "#82AAFF60",
		"foreground": "#DEDFE4",
		"green": "#C3E88D",
		"invalid": "#D3423E66",
		"orange": "#F78C6C",
		"pink": "#FF5899",
		"purple": "#C2AFFF",
		"red": "#D95757",
		"violet": "#BB80B3",
		"white": "#FFFFFF",
		"yellow": "#ECF991"
	}
}
